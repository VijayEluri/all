#--------------------------------------------------------------------------#
# Hibernate Named Queries Templates File
#--------------------------------------------------------------------------#
# conventions for placeholder:
# & - placeholder for database schema;
# $ - placeholder for entity/table name
#--------------------------------------------------------------------------#

# com.saperion.hibernateconfig.NativeSQLQueryGenerator 
get_path_mssql=select &.get_path_$(:sysrowid, :acl) 

get_path_oracle=select &.$(:sysrowid, :acl) from DUAL 

get_dynamic_properties_mssql=select my_value_name, my_value_type, my_val from &.get_dynamic_properties_$(:xhdoc)

#TODO:
get_dynamic_properties_oracle= SELECT t.XHDOC as id_source, extractValue(itm.column_value, '/property/@name') as my_value_name,    extractValue(itm.column_value,  '/property/@type') as my_value_type,   extract(itm.column_value,  '/property/values//value/text()').getstringval() as  my_val FROM &.$ t,    TABLE(SELECT  xmlSequence(extract( SYSDOCPROPERTIES, 'properties//property'))    from &.$ t1 where   t1.XHDOC=t.XHDOC) itm WHERE t.XHDOC=:xhdoc AND t.SYSINDEXSTATE < 65001

# com.saperion.hibernateconfig.JCRQueryGenerator
# Workspaces
get_workspace_xhdoc_by_name_=select  XHDOC from $ where (NAME = :name)  and (SYSINDEXSTATE < :sysindexstate) 
get_workspace_names_=select NAME from $ where   (SYSINDEXSTATE < :sysindexstate) 
get_workspaces_=select NAME, ROOTID from $ where   (SYSINDEXSTATE < :sysindexstate) 

# Mixins
get_xhdoc_by_linkid_=select  XHDOC from $ where LINKID = :linkid  
get_linkid_property_=from $ where LINKID = :linkid  

# Node tables
get_childs_=select SYSROWID from $ where (PARENTID =:parentid)  and (SYSINDEXSTATE < :sysindexstate) order by SYSORDERKEY 
get_child_infos_=select SYSROWID, JCRXNAME, SYSORDERKEY from $ where (PARENTID =:parentid)  and (SYSINDEXSTATE < :sysindexstate) order by SYSORDERKEY 
get_childs_by_parentid_= from $ where (PARENTID =:parentid)  and (SYSINDEXSTATE < :sysindexstate) order by SYSORDERKEY 
get_xhdoc_=select  XHDOC from $ where (SYSROWID =:sysrowid)  and (SYSINDEXSTATE < :sysindexstate) 
get_node_by_uuid_=from pathview_$ where (SYSROWID =:id)  and (SYSINDEXSTATE < :sysindexstate) 
get_node_by_path_=from pathview_$ where (PATH =:id) and (SYSINDEXSTATE < :sysindexstate) 

# References
delete_backlinks_=DELETE FROM $SYSBACKREF  WHERE (HDOC in (SELECT DISTINCT XHDOC FROM $ WHERE SYSROWID = ? AND XHDOC = ?)) AND (MULTIVAL = ? ) 
get_references_by_id_=select  SYSBACKREF from $ where (SYSROWID =:sysrowid)  and (SYSINDEXSTATE < :sysindexstate)
get_versions_references_ =select s.MULTIVAL from $ d join d.SYSBACKREF as s where s.HDOC = :hdoc and d.SYSROWID = :sysrowid and d.SYSINDEXSTATE <= 55001 

# Aggregate functions
get_max_sysorderkey_=select MAX(SYSORDERKEY) from $ where PARENTID = :parentid  and (SYSINDEXSTATE < :sysindexstate) 

# Revisions
get_version_node_=from $ where XHDOC=:id  and SYSINDEXSTATE = :sysindexstate
get_revision_predecessor_=select XHDOC, SYSMODIFYUSER, SYSREVCOMMENT, SYSREVVERSION, SYSREVDATETIME from $ where SYSINDEXSTATE = :sysindexstate and SYSROWID =:sysrowid and SYSREVDATETIME = (select MAX(SYSREVDATETIME) from $ where SYSINDEXSTATE = :sysindexstate and SYSROWID =:sysrowid and SYSREVDATETIME < (select SYSREVDATETIME from $ where SYSROWID =:sysrowid and XHDOC =:xhdoc and SYSINDEXSTATE in (0, :sysindexstate)))  
get_revision_successor_=select XHDOC, SYSMODIFYUSER, SYSREVCOMMENT, SYSREVVERSION, SYSREVDATETIME from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid and SYSREVDATETIME = (select MIN(SYSREVDATETIME) from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid and SYSREVDATETIME > (select SYSREVDATETIME from $ where SYSROWID =:sysrowid and XHDOC =:xhdoc and SYSINDEXSTATE in (0, :sysindexstate)))  
get_first_revision_=select XHDOC, SYSMODIFYUSER, SYSREVCOMMENT, SYSREVVERSION, SYSREVDATETIME from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid and SYSREVREASON=8 
get_last_revision_=select XHDOC, SYSMODIFYUSER, SYSREVCOMMENT, SYSREVVERSION, SYSREVDATETIME from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid  and SYSREVDATETIME = (select MAX(SYSREVDATETIME) from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid ) 
get_revisons_list_=select XHDOC, SYSMODIFYUSER, SYSREVCOMMENT, SYSREVVERSION, SYSREVDATETIME from $ where SYSINDEXSTATE in (0, :sysindexstate) and SYSROWID =:sysrowid order by SYSREVDATETIME desc 


# Workflow 

get_task_by_id_ = from $ where SYSROWID = :taskid and SYSINDEXSTATE < :sysindexstate and SYSOUTLINERDATA is null
get_root_task_by_id_ = from $ where SYSROWID = :taskid and SYSINDEXSTATE < :sysindexstate and SYSOUTLINERDATA is null and DFPARENTUID is null

get_tasks_ = from $ where USERID in (:ids) and SYSINDEXSTATE < :sysindexstate and SYSOUTLINERDATA is null

get_box_definitions_ = select USERID, USERNAME , case  when USERID = :inbox then 1 else 0 end ,  case  when USERID IN (:groupbox) then 1 else 0 end ,  case  when USERID IN (:substitute) then 1 else 0 end, case  when USERID IN (:orgunit) then 1 else 0 end from $ where USERID IN (:allids) and SYSINDEXSTATE < :sysindexstate and  SYSOUTLINERDATA =:sysoutlinerdata

# Additional queries for Event and Lock
getVersionList= SELECT new map(XSOURCE as XSOURCE ,XDEST as XDEST) FROM XREVISE
	 
getAllEvents= SELECT new map(XSYSROWID as XSYSROWID, XHDOC as XHDOC, XTRANSACTION as XTRANSACTION, XEVENT as XEVENT, XSTATUS as	XSTATUS ,SYSTIMESTAMP as SYSTIMESTAMP) FROM XEVENTS
	 
getEvents=	SELECT new map(XSYSROWID as XSYSROWID, XHDOC as XHDOC,	XTRANSACTION as XTRANSACTION, XEVENT as XEVENT, XSTATUS as	XSTATUS ,SYSTIMESTAMP as SYSTIMESTAMP) FROM XEVENTS WHERE	XTRANSACTION = ?
	 
removeEvent= DELETE FROM XEVENTS WHERE (XSYSROWID = ?) AND (XHDOC = ?) AND	(XEVENT = ?)
	 
getLocks=	SELECT XKEY FROM XLOCKS WHERE XTABLE = ?
	