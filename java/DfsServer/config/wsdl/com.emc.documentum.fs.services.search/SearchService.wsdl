<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="SearchService"
    targetNamespace="http://search.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://search.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import
                namespace="http://search.services.fs.documentum.emc.com/" schemaLocation="SearchService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://schema.core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="SearchService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="SearchService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="execute">
        <part element="tns:execute" name="parameters"/>
    </message>
    <message name="executeResponse">
        <part element="tns:executeResponse" name="parameters"/>
    </message>
    <message name="SerializableException">
        <part element="ns1:SerializableException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="stopSearch">
        <part element="tns:stopSearch" name="parameters"/>
    </message>
    <message name="stopSearchResponse">
        <part element="tns:stopSearchResponse" name="parameters"/>
    </message>
    <message name="getRepositoryList">
        <part element="tns:getRepositoryList" name="parameters"/>
    </message>
    <message name="getRepositoryListResponse">
        <part element="tns:getRepositoryListResponse" name="parameters"/>
    </message>
    <message name="getClusters">
        <part element="tns:getClusters" name="parameters"/>
    </message>
    <message name="getClustersResponse">
        <part element="tns:getClustersResponse" name="parameters"/>
    </message>
    <message name="getSubclusters">
        <part element="tns:getSubclusters" name="parameters"/>
    </message>
    <message name="getSubclustersResponse">
        <part element="tns:getSubclustersResponse" name="parameters"/>
    </message>
    <message name="getResultsProperties">
        <part element="tns:getResultsProperties" name="parameters"/>
    </message>
    <message name="getResultsPropertiesResponse">
        <part element="tns:getResultsPropertiesResponse" name="parameters"/>
    </message>
    <portType name="SearchServicePort">
        <operation name="execute">
            <documentation><![CDATA[ Executes a query against the search repositories. The operation returns a {@link QueryResult} object that is
 composed of the {@link QueryStatus}, that contains search statuses for every targeted repository and a {@link
 DataPackage} that contains the expected subset of results.
 <p/>
 This operation allows to: <ul><li>execute a search across several repositories</li><li>get subsets of search
 results</li></ul>
 <p/>
 To get subsets of search results you have to provide a {@link QueryExecution} object with the following values:
 <ul> <li>startingIndex is the start index that is used to build the subset of results to return (default is
 0)</li> <li>maxResultsCount is the maximum number of results which is returned by the operation (default is
 100)</li> <li>maxResultPerSource is used to limit the total number of results that will be retrieved by the
 query</li> </ul>
 <p/>
 Client can also retrieve subsets of results of the same query without re executing the query by: <ul><li>Setting
 the {@link QueryExecution} queryId field for the first call and then use the queryId for subsequent calls.</li>
 <li>Using the queryId generated and returned in the {@link QueryResult} by the first call to execute (If no queryId is
 specified). Client has to set the returned queryId in the {@link QueryExecution} object for subsequent
 calls.</li></ul>
 <p/>
 The execution is synchronous by default. By specifying a {@link SearchProfile}, the user can retrieve results
 asynchronously.

 @param query     The query contains the query definition (i.e. the constraints) as well as the repositories to
                  search.
 @param execution Contains the execution parameters: the query id, the number of results to return and their
                  indexes in the global results Set.
 @param options   The object containing a {@link PropertyProfile} defining which data will be returned as results
                  and a SearchProfile defining the kind of execution. If this object is null, default operation
                  behaviors will take effect.

 @return The QueryResult contains the QueryStatus that aggregates the repository statuses, the dataPackage
         representing the found results and the query Id. This query id can be used for subsequent calls to
         SearchService operations.

 @throws SearchServiceException
]]></documentation>
            <input message="tns:execute"/>
            <output message="tns:executeResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="stopSearch">
            <documentation><![CDATA[ Stop the execution of the query passed in parameter.
 @param query  The query to stop
 @param execution the execution parameters of the query to stop
 @return The QueryStatus of the stopped search
 @throws SearchServiceException
]]></documentation>
            <input message="tns:stopSearch"/>
            <output message="tns:stopSearchResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getRepositoryList">
            <documentation><![CDATA[ This service returns the list of available repositories.<p> The Repository can either be a Docbase (MANAGED)
 source or an EXTERNAL source, if FS2 option is connected.

 @param options An object containing profiles and properties that specify operation behaviors. If this object is
                null, default operation behaviors will take effect. (Not used in D6, future use only)

 @return The List of Repositories that can be searched through the execute method of this SearchService

 @throws SearchServiceException
]]></documentation>
            <input message="tns:getRepositoryList"/>
            <output message="tns:getRepositoryListResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getClusters">
            <documentation><![CDATA[ Calculates clusters on query results for the specified {@link ClusteringProfile}.
 <p/>
 <p/>
 The operation should be called after a call to execute with the same queryId, {@link Query} and {@link
 QueryExecution} objects.
 <p/>
 <p/>
 If the query referenced by the queryId has not already been executed or if the results are no longer available in
 the search context, the query will be executed according to the {@link Query}, {@link QueryExecution} and {@link
 OperationOptions} parameters.
 The execution is synchronous by default. By specifying a {@link SearchProfile}, the user can retrieve clusters
 asynchronously.
 If the query has no results, the clusters are empty.
 <p/>
 <p/>
 @since 6.5

 @param query     The query contains the query definition (i.e. the constraints) as well as the repositories to
                  search.
 @param execution Contains the execution parameters: the query id, the number of results to return and their
                  indexes in the global results Set.
 @param options   Object containing a ClusteringProfile and a SearchProfile. The ClusteringProfile contains a list of
                  ClusteringStrategy. Client can specify in the ClusteringStrategy to return or not the identities
                  of the objects contained in a cluster. Other profiles are not applicable. If this object is null
                  or ClusteringStrategies empty, no clusters are returned.

 @return A QueryCluster object containing: a list of ClusterTree and the id of the query.

 @throws SearchServiceException
]]></documentation>
            <input message="tns:getClusters"/>
            <output message="tns:getClustersResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getSubclusters">
            <documentation><![CDATA[ Calculates clusters on the objects specified in the {@link ObjectIdentitySet} for the specified {@link
 ClusteringProfile}.
 <p/>
 <p/>
 The operation should be called after a call to execute with the same queryId, {@link Query} and {@link
 QueryExecution} objects.
 <p/>
 <p/>
 If the query referenced by the queryId has not already been executed or if the results are no longer available in
 the search context, the query will be executed according to the Query, QueryExecution and OperationOptions
 parameters.
 The execution is synchronous by default. By specifying a {@link SearchProfile}, the user can retrieve subclusters
 asynchronously.
 If the query has no results, the clusters are empty.
 <p/>
 <p/>
 @since 6.5

 @param objectsToClusterize  Contains the object identities that will be used to calculate clusters
 @param query     The query contains the query definition (i.e. the constraints) as well as the repositories to
                  search.
 @param execution Contains the execution parameters: the query id, the number of results to return and their
                  indexes in the global results Set.
 @param options   Object containing a ClusteringProfile and a SearchProfile. The ClusteringProfile contains a list of
                  ClusteringStrategy (ClusterTrees are calculated according to a ClusteringStrategy). You can
                  specify in the ClusteringStrategy to return or not the identities of the objects contained in a
                  cluster. Other profiles are not applicable. If this object is null or ClusteringStrategies
                  empty, no clusters are returned.

 @return A QueryCluster object containing: a list of {@link ClusterTree} and the query id.

 @throws SearchServiceException
]]></documentation>
            <input message="tns:getSubclusters"/>
            <output message="tns:getSubclustersResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getResultsProperties">
            <documentation><![CDATA[ Returns the query results specified in the {@link ObjectIdentitySet}. The operation allows retrieving documents
 belonging to a cluster.
 <p/>
 It should be called after a call to getClusters or getSubclusters.
 <p/>
 If the search context is no longer available, the query will be executed according to the {@link Query}, {@link
 QueryExecution} and {@link OperationOptions} parameters to retrieve the specified objects.
 <p/>
 The execution is synchronous by default. By specifying a {@link SearchProfile}, the user can retrieve objects
 asynchronously.

 @since 6.5

 @param forClustersObjects Contains a list of ObjectIdentity objects specifying the clusters objects to retrieve.
 @param query              The query contains the query definition (i.e. the constraints) as well as the
                           repositories to search.
 @param execution          Contains the execution parameters: the query id, the number of results to return and
                           their indexes in the global results Set.
 @param options            Object containing a SearchProfile. Other profiles are not applicable. If this object is null, default operation behaviors will take effect.

 @return A DataPackage containing the objects specified in the ObjectIdentitySet

 @throws SearchServiceException
]]></documentation>
            <input message="tns:getResultsProperties"/>
            <output message="tns:getResultsPropertiesResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
    </portType>
    <binding name="SearchServicePortBinding" type="tns:SearchServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="execute">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="stopSearch">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getRepositoryList">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getClusters">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getSubclusters">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getResultsProperties">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="SearchService">
        <documentation><![CDATA[SearchService is a primary mechanism for searching objects in multiple docbases and external repositories.<p>
 <p/>
 It provides basic operations for listing the available repositories and searching objects in theses sources.<p>
 <p/>
 External Repositories will only be available when FS2 option is configured and connected to the DFS System
 through the DFC.

 @see com.emc.documentum.fs.datamodel.core.OperationOptions
 @see com.emc.documentum.fs.datamodel.core.profiles.Profile
 @since 6.0]]></documentation>
        <port binding="tns:SearchServicePortBinding" name="SearchServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
