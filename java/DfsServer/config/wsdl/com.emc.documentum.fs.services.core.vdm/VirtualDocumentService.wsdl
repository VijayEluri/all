<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="VirtualDocumentService"
    targetNamespace="http://vdm.core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://vdm.core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import
                namespace="http://vdm.core.services.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://vdm.core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="VirtualDocumentService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="update">
        <part element="tns:update" name="parameters"/>
    </message>
    <message name="updateResponse">
        <part element="tns:updateResponse" name="parameters"/>
    </message>
    <message name="CoreServiceException">
        <part element="tns:CoreServiceException" name="fault"/>
    </message>
    <message name="ServiceException">
        <part element="ns1:ServiceException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="retrieve">
        <part element="tns:retrieve" name="parameters"/>
    </message>
    <message name="retrieveResponse">
        <part element="tns:retrieveResponse" name="parameters"/>
    </message>
    <message name="createSnapshot">
        <part element="tns:createSnapshot" name="parameters"/>
    </message>
    <message name="createSnapshotResponse">
        <part element="tns:createSnapshotResponse" name="parameters"/>
    </message>
    <message name="removeSnapshot">
        <part element="tns:removeSnapshot" name="parameters"/>
    </message>
    <message name="removeSnapshotResponse">
        <part element="tns:removeSnapshotResponse" name="parameters"/>
    </message>
    <portType name="VirtualDocumentServicePort">
        <operation name="update">
            <documentation><![CDATA[ The update operation modifies (or creates) a virtual document. <p>

 The operation is passed a DataObject representing the root document of the virtual document. 
 If the object does not exist, it will be created.
 If the object exists and is a simple document, the operation will convert it to a virtual document if
 (1) one or more children are attached to the document, or (2) the DataObject passed has its r_is_virtual_doc  property set to 1.
 The existing object will be updated with data (such as property settings) provided in the DataObject passed to the operation.<p>

 The child nodes of the virtual document are updated, deleted, or set using data provided in a List&lt;ChildrenActionInfo&gt;. 

 Optional operation behaviors can be specified in a VdmUpdateProfile. The operation is affected by the VdmUpdateProfile only and ignores other profiles.

 The update operation does not require that an existing object be checked out prior to the operation. 
 If the object is not checked out, it will be checked out and checked in by the operation. If the object has been checked out 
 by the user performing the update operation prior to the update operation, it will be checked in and the lock will not be preserved. 
 This behavior can be changed using the retainLock setting in VdmUpdateProfile.
 
 @see com.emc.documentum.fs.datamodel.core.vdm.VdmChildrenActionInfo
 @see com.emc.documentum.fs.datamodel.core.profiles.VdmUpdateProfile

 @param parent   DataObject that represents the root document of the virtual document.
 @param children a collection of {@link com.emc.documentum.fs.datamodel.core.vdm.VdmChildrenActionInfo} instances, 
 each of which contains information used to make a specific modification to the child list of the virtual document.
 @param options an OperationOptions instance, which may contain an instance of VdmUpdateProfile. 
 A CheckinProfile and CheckoutProfile can be provided to specify options for the checkin and checkout of the updated object. 
 The composition of the returned DataObject is governed by the standard ObjectService get operation profiles 
 (PropertyProfile, RelationshipProfile, ContentProfile, PermissionProfile, and ContentTransferProfile).

 @return a DataObject representing the virtual document after the update. The DataObject contains a list of ReferenceRelationship 
 instances in which the virtual document child is the target object. Binding information for each virtual document node is included in 
 the relationshipProperties list of the target object.

 @throws com.emc.documentum.fs.services.core.CoreServiceException

]]></documentation>
            <input message="tns:update"/>
            <output message="tns:updateResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="retrieve">
            <documentation><![CDATA[ The retrieve gets a DataObject containing information about a virtual document, including its child nodes and binding rules.<p>
 The retrieve operation can be used to get information using either a virtual document or a snapshot of a virtual document.

 @param parent the identity of the root document of the virtual document or snapshot to retrieve.
 @param options  an OperationOptions instance, which may contain an instance of VdmRetrieveProfile. 
 This operation will also process PropertyProfile, ContentProfile, PermissionProfile, RelationshipProfile to specify the data 
 contained in the returned DataObject and ContentTransferProfile to specify content transfer options.

 @return a DataObject representing the virtual document. The DataObject contains a list of ReferenceRelationship 
 instances in which the virtual document child is the target object. Binding information for each node is included in the 
 relationshipProperties collection of the target object. Use profiles to specify other data returned as part of the DataObject.

 @throws com.emc.documentum.fs.services.core.CoreServiceException

 @see com.emc.documentum.fs.datamodel.core.profiles.VdmRetrieveProfile

]]></documentation>
            <input message="tns:retrieve"/>
            <output message="tns:retrieveResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="createSnapshot">
            <documentation><![CDATA[ The createSnapshot operations creates a snapshot of the virtual document and associates it with a document. <p>
 If the document does not exist the associate document will be created and saved in the repository before the resulting snapshot can be associated. 
 If document exists in the repository, the createSnapshot operation will update the existing object using data passed in a DataObject before creating the snapshot.<p>
 The createSnapshot operation can create either an inline or a non-inline snapshot. In the first case, the identity of the associate document is the same 
 as the identity of the parent document. In the latter case, the parent and associated documents are not identical.

 @param parent the ObjectIdentity of the root of the virtual document from which to derive the snapshot.
 @param associate the object (a dm_sysobject or subtype) with which to associate the assemblies that comprise the snapshot. 
 This can be the same object as parent, or a different object. If the object does not exist, it will be created.
 @param options  an OperationOptions instance containig profiles and properties that specify operation behaviors. 
 Specifically, it can contain a VdmRetrieveProfile, as well as PropertyProfile, ContentProfile, PermissionProfile, 
 and RelationshipProfile, which will determine how to populate the returned DataObject. 
 It can contain ContentTransferProfile to specify content transfer options. If VdmRetrieveProfile is not provided in OperationOptions,
 then a new VdmRetrieveProfile will be constructed and used by the createSnapshot operation, with binding set to "CURRENT" and shouldFollowAssembly set to true.

 @return Returns a DataObject representing the virtual document from which the snapshot was created. The DataObject contains a list of ReferenceRelationship 
 instances in which the virtual document child is the target object. Binding information for each node is included in the 
 relationshipProperties collection of the target object. Use profiles to specify other data returned as part of the DataObject.

 @throws com.emc.documentum.fs.services.core.CoreServiceException

]]></documentation>
            <input message="tns:createSnapshot"/>
            <output message="tns:createSnapshotResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="removeSnapshot">
            <documentation><![CDATA[  Removes the snapshot from the document with which they are associated (the document itself remains in the repository).

 @param associate the ObjectIdentity of the object (dm_sysobject or subtype) with which the snapshot is associated.
 @param options reserved for future use

 @throws com.emc.documentum.fs.services.core.CoreServiceException

]]></documentation>
            <input message="tns:removeSnapshot"/>
            <output message="tns:removeSnapshotResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
    </portType>
    <binding name="VirtualDocumentServicePortBinding" type="tns:VirtualDocumentServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="update">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="retrieve">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="createSnapshot">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="removeSnapshot">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="VirtualDocumentService">
        <documentation><![CDATA[The VirtualDocument service  provides operations for managing virtual documents, such as modifying virtual documents by adding, 
 removing, or reordering nodes, retrieving virtual documents from the repository, creating snapshots, and removing snapshots.<p>

 @since 6.5]]></documentation>
        <port binding="tns:VirtualDocumentServicePortBinding" name="VirtualDocumentServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
