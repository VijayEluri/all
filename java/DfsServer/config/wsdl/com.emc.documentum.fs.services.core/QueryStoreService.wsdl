<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="QueryStoreService"
    targetNamespace="http://core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import
                namespace="http://schema.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.services.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryStoreService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="listSavedQueries">
        <part element="tns:listSavedQueries" name="parameters"/>
    </message>
    <message name="listSavedQueriesResponse">
        <part element="tns:listSavedQueriesResponse" name="parameters"/>
    </message>
    <message name="CoreServiceException">
        <part element="tns:CoreServiceException" name="fault"/>
    </message>
    <message name="ServiceException">
        <part element="ns1:ServiceException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="loadSavedQuery">
        <part element="tns:loadSavedQuery" name="parameters"/>
    </message>
    <message name="loadSavedQueryResponse">
        <part element="tns:loadSavedQueryResponse" name="parameters"/>
    </message>
    <message name="saveQuery">
        <part element="tns:saveQuery" name="parameters"/>
    </message>
    <message name="saveQueryResponse">
        <part element="tns:saveQueryResponse" name="parameters"/>
    </message>
    <portType name="QueryStoreServicePort">
        <operation name="listSavedQueries">
            <documentation><![CDATA[ Lists Saved Queries stored in the specified repository.<p>
 Only SavedQuery objects metadata is returned and the client should call @see loadSavedQuery to be provided with the whole SavedQuery data (i.e. saved defintion and saved results).<br/>

 @param repository The managed repository name that stores the queries.
 @param exec This parameter's fields startingIndex and maxResultCount can be populated to limit the number of SavedQuery objects to be returned.
 @param filter This optionnal object handles the constraints that should be matched by the saved queries to return.
 @param options This parameter can be poputaled with a PropertyProfile to control the amount of data to be returned.
 @return The DataObjects corresponding to the SavedQuery objects that match the filter.
 @throws CoreServiceException if the specified repository is unreachable
]]></documentation>
            <input message="tns:listSavedQueries"/>
            <output message="tns:listSavedQueriesResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="loadSavedQuery">
            <documentation><![CDATA[ Loads a Saved Query.<p>

 This operation might be resources consuming because of the number of saved results.<p>

 Add a PropertyProfile to the OperationOptions parameter to configure the amount of data to be returned as Saved Results.

 @param savedQueryId Identity of the Saved Query to load.
 @param pagingInfo This parameter's fields startIndex and pageSize can be populated
               to limit the number of saved results to be returned with the saved Query.     * @param options Add a property profile to this parameter to control the amount of data returned as the saved results.
 @return A SavedQuery Object populated with its QueryStatus and QueryResults if they exist.
 @throws com.emc.documentum.fs.services.core.CoreServiceException if an error occurs
]]></documentation>
            <input message="tns:loadSavedQuery"/>
            <output message="tns:loadSavedQueryResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="saveQuery">
            <documentation><![CDATA[ Saves the specified query with associated results to the repository that is referenced in the specified identity.
 <p>
 To create a new repository object, the ObjectIdentity is populated with only a repository name.
 Content Server assigns a unique object identifier when the object is created in the repository.
 </p>
 <p>
 To update an existing SavedQuery, The ObjectIdentity is populated with that repository object identity.
 </p>
 <p>
 The results identities will be resolved using the QueryExecution field: queryId.
 The Query might be launched again to resolve results Identities, using the specified QueryExecution.
 @see com.emc.documentum.fs.services.search.client.ISearchService
 </p>
 <p>
 It is not possible to specify where the Saved Query is to be stored in the content server.
 </p>
 @param object The object containing the object_name and title attributes. Its identity defines at least the repository where a new Saved Query will be saved. It can optionnally reference the existing SavedQuery to update.
 @param richQuery The query definition and its properties to store.
 @param exec  Use this parameter to provide an optionnal queryId. This is necessary to resolve results identities.
 @param results Optionnal Identities of the objects to save as the query results. It can be null, in that case, the query is saved without any results.
 @param options (reserved for Future use)
 @return The Identity of the created SavedQuery
 @throws com.emc.documentum.fs.services.core.CoreServiceException if an error occurs
]]></documentation>
            <input message="tns:saveQuery"/>
            <output message="tns:saveQueryResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
    </portType>
    <binding name="QueryStoreServicePortBinding" type="tns:QueryStoreServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="listSavedQueries">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="loadSavedQuery">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="saveQuery">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="QueryStoreService">
        <documentation><![CDATA[<B>Purpose</B>: QueryStoreService provides fundamental operations for listing, creating, updating, loading SavedQueries objects
 from the repository.<p>

 To delete a SavedQuery, one should use the ObjectService.delete() operation.

 @see com.emc.documentum.fs.datamodel.core.query.Query
 @see com.emc.documentum.fs.datamodel.core.query.SavedQuery
 @see com.emc.documentum.fs.datamodel.core.OperationOptions
 @see com.emc.documentum.fs.datamodel.core.profiles.Profile]]></documentation>
        <port binding="tns:QueryStoreServicePortBinding" name="QueryStoreServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
