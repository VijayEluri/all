<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="SchemaService"
    targetNamespace="http://core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import
                namespace="http://schema.core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="SchemaService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.services.fs.documentum.emc.com/" schemaLocation="SchemaService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="SchemaService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="getTypeInfo">
        <part element="tns:getTypeInfo" name="parameters"/>
    </message>
    <message name="getTypeInfoResponse">
        <part element="tns:getTypeInfoResponse" name="parameters"/>
    </message>
    <message name="SerializableException">
        <part element="ns1:SerializableException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="getPropertyInfo">
        <part element="tns:getPropertyInfo" name="parameters"/>
    </message>
    <message name="getPropertyInfoResponse">
        <part element="tns:getPropertyInfoResponse" name="parameters"/>
    </message>
    <message name="getRepositoryInfo">
        <part element="tns:getRepositoryInfo" name="parameters"/>
    </message>
    <message name="getRepositoryInfoResponse">
        <part element="tns:getRepositoryInfoResponse" name="parameters"/>
    </message>
    <message name="getSchemaInfo">
        <part element="tns:getSchemaInfo" name="parameters"/>
    </message>
    <message name="getSchemaInfoResponse">
        <part element="tns:getSchemaInfoResponse" name="parameters"/>
    </message>
    <message name="getDynamicAssistValues">
        <part element="tns:getDynamicAssistValues" name="parameters"/>
    </message>
    <message name="getDynamicAssistValuesResponse">
        <part element="tns:getDynamicAssistValuesResponse" name="parameters"/>
    </message>
    <portType name="SchemaServicePort">
        <operation name="getTypeInfo">
            <documentation><![CDATA[ The getTypeInfo operation returns information about a repository type specified by name.

 @param repositoryName Name of the repository to examine.
 @param schemaName   optional parameter.  If specified, used to determine what schema to load.  If <null> or
                     "RICH", default schema will be used.
 @param typeName The name of the type about which information is to be retrieved.
 @param options  Contains profiles and properties that specify operation behaviors. In the case of this operation,
                 a SchemaProfile can be passed to control the information returned.
 @return list of all TypeInfo objects for the specified schema.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getTypeInfo"/>
            <output message="tns:getTypeInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getPropertyInfo">
            <documentation><![CDATA[ Retrieves property information for the specified property name. This method is typically used when schema was
 partially loaded.

 @param repositoryName Name of the repository to examine.
 @param schemaName     optional parameter.  If specified, used to determine what schema to load.  If <null> or
                       "RICH", default schema will be used.
 @param typeName       The name of the type about which information is to be retrieved.
 @param propertyName   The name of the repository property about which to retrieve information.
 @param options  Contains profiles and properties that specify operation behaviors. In the case of this operation,
                 a SchemaProfile can be passed to control the information returned.
 @return PropertyInfo
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getPropertyInfo"/>
            <output message="tns:getPropertyInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getRepositoryInfo">
            <documentation><![CDATA[ Retrieves schema information about a repository specified by name, including a list of repository schemas.
 For the current release, only the RICH repository schema is supported.

 @param repositoryName Name of the repository to examine.
 @param options  Contains profiles and properties that specify operation behaviors. In the case of this operation,
                 a SchemaProfile can be passed to control the information returned.
 @return RepositoryInfo
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getRepositoryInfo"/>
            <output message="tns:getRepositoryInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getSchemaInfo">
            <documentation><![CDATA[ Retrieves schema information for the specified repository.  Note that some repository can have multiple schemas.
 There is at least one (default) schema.  Note that options can include SchemaProfile to control amount of data
 returned.

 @param repositoryName Name of the repository to examine.
 @param schemaName     optional parameter.  If specified, used to determine what schema to load.  If <null> or
                       "RICH", default schema will be used.
 @param options  Contains profiles and properties that specify operation behaviors. In the case of this operation,
                 a SchemaProfile can be passed to control the information returned.
 @return SchemaInfo
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getSchemaInfo"/>
            <output message="tns:getSchemaInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getDynamicAssistValues">
            <documentation><![CDATA[ Retrieves information about dynamic value assistance for a specified repository property. Value assistance
 provides a list of valid values for a property, which are used to populate a pick list associated with a field on
 a dialog box. Dynamic value assistance uses a query or a routine to list possible values for an attribute,
 generally based on the values of other attributes, rather than a literal list. A value assist list (whether
 literal or dynamic) can be complete, meaning that no values for the property are valid other than those in the
 list, or incomplete, meaning that the user is allowed to provide values in addition to those in the list.
 @param repositoryName Name of the repository to examine.
 @param schemaName     optional parameter.  If specified, used to determine what schema to load.  If <null> or
                       "RICH", default schema will be used.
 @param typeName       The name of the type about which information is to be retrieved.
 @param propertyName   The name of the repository property about which to retrieve information.
 @param propertySet    -- optional parameter
 @param options  Contains profiles and properties that specify operation behaviors. In the case of this operation,
                 a SchemaProfile can be passed to control the information returned.
 @return the value assistance information
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getDynamicAssistValues"/>
            <output message="tns:getDynamicAssistValuesResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
    </portType>
    <binding name="SchemaServicePortBinding" type="tns:SchemaServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="getTypeInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getPropertyInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getRepositoryInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getSchemaInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getDynamicAssistValues">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="SchemaService">
        <documentation><![CDATA[The schema service provides a mechanism for retrieving information regarding repository schemas. A schema is a formal
 definition of repository metadata, including types, properties, and relationships. For the current release only the
 RICH repository schema is supported, which provides metadata information concerning the data dictionary. In future
 releases a repository will potentially have an arbitrary number of named schemas. The schema service can be used for
 creating a data structure against which a client can perform offline validation of objects against repository
 metadata.

 @see com.emc.documentum.fs.datamodel.core.profiles.SchemaProfile

 @since 6.0]]></documentation>
        <port binding="tns:SchemaServicePortBinding" name="SchemaServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
