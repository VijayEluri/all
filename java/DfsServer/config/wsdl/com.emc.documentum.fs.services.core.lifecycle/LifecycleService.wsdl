<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="LifecycleService"
    targetNamespace="http://lifecycle.core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://lifecycle.core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://lifecycle.core.services.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://lifecycle.core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="LifecycleService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="execute">
        <part element="tns:execute" name="parameters"/>
    </message>
    <message name="executeResponse">
        <part element="tns:executeResponse" name="parameters"/>
    </message>
    <message name="CoreServiceException">
        <part element="tns:CoreServiceException" name="fault"/>
    </message>
    <message name="ServiceException">
        <part element="ns1:ServiceException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="detach">
        <part element="tns:detach" name="parameters"/>
    </message>
    <message name="detachResponse">
        <part element="tns:detachResponse" name="parameters"/>
    </message>
    <message name="attach">
        <part element="tns:attach" name="parameters"/>
    </message>
    <message name="attachResponse">
        <part element="tns:attachResponse" name="parameters"/>
    </message>
    <message name="getLifecycle">
        <part element="tns:getLifecycle" name="parameters"/>
    </message>
    <message name="getLifecycleResponse">
        <part element="tns:getLifecycleResponse" name="parameters"/>
    </message>
    <portType name="LifecycleServicePort">
        <operation name="execute">
            <documentation><![CDATA[ The execute operation processes a collection of LifecycleOperation objects, each of which specifies an object and a lifecycle operation to execute on that object.<p>

 @param lifecycleOperations a Life<LifecyucleOperation>; each LifecycleOperation instance specifies an object and a lifecycle operation to execute on that object.
 The LifecycleOperation does not specify the lifecycle state name. This value is calculated based on the current life cycle state and the specific operation to be executed.
 @param options an OperationOptions instance containing a  LifecycleExecutionProfile instance to specify behavior options .
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:execute"/>
            <output message="tns:executeResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="detach">
            <documentation><![CDATA[ The detach operation processes a collection of objects, detaching each object from any lifecycle to which it is currently attached.<p>

 @param objectIds an ObjectIdentitySet identifying objects to detach from any lifecycle to which they are currently attached.
 @param options an OperationOptions instance; reserved for future use.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:detach"/>
            <output message="tns:detachResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="attach">
            <documentation><![CDATA[ The attach operation processes a list of AttachLifecycleInfo objects, each of which specifies a lifecycle, 
 a lifecycle state, and an object to attach to the lifecycle and state.<p>

  If no lifecycle is specified, the object is attached to the default lifecycle of the object type.
  If no state is specified, the object is placed in the lifecycle's base state.
  For an object to be attached to a state, the allow_attach property of the state must be set to true. 
 This property would normally be set at design time by the creator of the lifecycle.<p>

  The attach operation can also set the lifecycle alias scope (also called policy scope) of the object 
  by specifying the alias set name of an alias listed in the lifecycle's alias_set_ids property. 
  If no alias set name is specified by the attach operation, then Content Server logic determines the lifecycle alias scope for the object.  

 @param lifecycleInfos a List<AttachLifecycleInfo>; each AttachLifeCycleInfo instance provides information 
 required to attach an object to a lifecycle and state.
 @param options an OperationOptions instance; reserved for future use.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:attach"/>
            <output message="tns:attachResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getLifecycle">
            <documentation><![CDATA[ The getLifecycle operation processes an ObjectIdentitySet and returns a collection of LifecycleInfo objects, 
  each containing information about the lifecycle to which a specific object is attached. <p>

 @param objectIds a collection of objects about which to obtain lifecycle information.
 @param options an OperationOptions instance; reserved for future use.
 @return a List<LifecycleInfo>; each LifecycleInfo instance provides information about the lifecycle to which an object in the objectIds collection is attached.
 @throws com.emc.documentum.fs.services.core.CoreServiceException 
]]></documentation>
            <input message="tns:getLifecycle"/>
            <output message="tns:getLifecycleResponse"/>
            <fault message="tns:CoreServiceException" name="CoreServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
    </portType>
    <binding name="LifecycleServicePortBinding" type="tns:LifecycleServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="execute">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="detach">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="attach">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getLifecycle">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="CoreServiceException">
                <soap:fault name="CoreServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="LifecycleService">
        <documentation><![CDATA[The Lifecycle service provides operations for runtime use of lifecycles, 
 such as attaching objects to lifecycles, detaching objects from lifecycles, 
 moving objects from one lifecycle state to another, and examining the lifecycles associated with objects.

 @since 6.5]]></documentation>
        <port binding="tns:LifecycleServicePortBinding" name="LifecycleServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
