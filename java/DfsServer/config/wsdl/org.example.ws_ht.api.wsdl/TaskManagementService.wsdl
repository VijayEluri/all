<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="TaskManagementService"
    targetNamespace="http://www.example.org/WS-HT/api/wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://www.example.org/WS-HT/api/wsdl" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import namespace="http://www.example.org/WS-HT/api/xsd" schemaLocation="TaskManagementService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://www.example.org/WS-HT/api/wsdl" schemaLocation="TaskManagementService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://www.example.org/WS-HT/api" schemaLocation="TaskManagementService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://www.example.org/WS-HT" schemaLocation="TaskManagementService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://taskmanagement.bpm.core.datamodel.fs.documentum.emc.com/" schemaLocation="TaskManagementService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="TaskManagementService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="TaskManagementService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="TaskManagementService_schema8.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="TaskManagementService_schema9.xsd"/>
        </xsd:schema>
    </types>
    <message name="remove">
        <part element="tns:remove" name="parameters"/>
    </message>
    <message name="removeResponse">
        <part element="tns:removeResponse" name="parameters"/>
    </message>
    <message name="BpmServiceException">
        <part element="tns:BpmServiceException" name="fault"/>
    </message>
    <message name="ServiceException">
        <part element="ns1:ServiceException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="setPriority">
        <part element="tns:setPriority" name="parameters"/>
    </message>
    <message name="setPriorityResponse">
        <part element="tns:setPriorityResponse" name="parameters"/>
    </message>
    <message name="start">
        <part element="tns:start" name="parameters"/>
    </message>
    <message name="startResponse">
        <part element="tns:startResponse" name="parameters"/>
    </message>
    <message name="resume">
        <part element="tns:resume" name="parameters"/>
    </message>
    <message name="resumeResponse">
        <part element="tns:resumeResponse" name="parameters"/>
    </message>
    <message name="stop">
        <part element="tns:stop" name="parameters"/>
    </message>
    <message name="stopResponse">
        <part element="tns:stopResponse" name="parameters"/>
    </message>
    <message name="suspend">
        <part element="tns:suspend" name="parameters"/>
    </message>
    <message name="suspendResponse">
        <part element="tns:suspendResponse" name="parameters"/>
    </message>
    <message name="skip">
        <part element="tns:skip" name="parameters"/>
    </message>
    <message name="skipResponse">
        <part element="tns:skipResponse" name="parameters"/>
    </message>
    <message name="delegate">
        <part element="tns:delegate" name="parameters"/>
    </message>
    <message name="delegateResponse">
        <part element="tns:delegateResponse" name="parameters"/>
    </message>
    <message name="query">
        <part element="tns:query" name="parameters"/>
    </message>
    <message name="queryResponse">
        <part element="tns:queryResponse" name="parameters"/>
    </message>
    <message name="release">
        <part element="tns:release" name="parameters"/>
    </message>
    <message name="releaseResponse">
        <part element="tns:releaseResponse" name="parameters"/>
    </message>
    <message name="getInput">
        <part element="tns:getInput" name="parameters"/>
    </message>
    <message name="getInputResponse">
        <part element="tns:getInputResponse" name="parameters"/>
    </message>
    <message name="fail">
        <part element="tns:fail" name="parameters"/>
    </message>
    <message name="failResponse">
        <part element="tns:failResponse" name="parameters"/>
    </message>
    <message name="complete">
        <part element="tns:complete" name="parameters"/>
    </message>
    <message name="completeResponse">
        <part element="tns:completeResponse" name="parameters"/>
    </message>
    <message name="setOutput">
        <part element="tns:setOutput" name="parameters"/>
    </message>
    <message name="setOutputResponse">
        <part element="tns:setOutputResponse" name="parameters"/>
    </message>
    <message name="addAttachment">
        <part element="tns:addAttachment" name="parameters"/>
    </message>
    <message name="addAttachmentResponse">
        <part element="tns:addAttachmentResponse" name="parameters"/>
    </message>
    <message name="getAttachments">
        <part element="tns:getAttachments" name="parameters"/>
    </message>
    <message name="getAttachmentsResponse">
        <part element="tns:getAttachmentsResponse" name="parameters"/>
    </message>
    <message name="getOutput">
        <part element="tns:getOutput" name="parameters"/>
    </message>
    <message name="getOutputResponse">
        <part element="tns:getOutputResponse" name="parameters"/>
    </message>
    <message name="getFault">
        <part element="tns:getFault" name="parameters"/>
    </message>
    <message name="getFaultResponse">
        <part element="tns:getFaultResponse" name="parameters"/>
    </message>
    <message name="claim">
        <part element="tns:claim" name="parameters"/>
    </message>
    <message name="claimResponse">
        <part element="tns:claimResponse" name="parameters"/>
    </message>
    <message name="suspendUntil">
        <part element="tns:suspendUntil" name="parameters"/>
    </message>
    <message name="suspendUntilResponse">
        <part element="tns:suspendUntilResponse" name="parameters"/>
    </message>
    <message name="getAttachmentInfos">
        <part element="tns:getAttachmentInfos" name="parameters"/>
    </message>
    <message name="getAttachmentInfosResponse">
        <part element="tns:getAttachmentInfosResponse" name="parameters"/>
    </message>
    <message name="deleteAttachments">
        <part element="tns:deleteAttachments" name="parameters"/>
    </message>
    <message name="deleteAttachmentsResponse">
        <part element="tns:deleteAttachmentsResponse" name="parameters"/>
    </message>
    <message name="addComment">
        <part element="tns:addComment" name="parameters"/>
    </message>
    <message name="addCommentResponse">
        <part element="tns:addCommentResponse" name="parameters"/>
    </message>
    <message name="getComments">
        <part element="tns:getComments" name="parameters"/>
    </message>
    <message name="getCommentsResponse">
        <part element="tns:getCommentsResponse" name="parameters"/>
    </message>
    <message name="forward">
        <part element="tns:forward" name="parameters"/>
    </message>
    <message name="forwardResponse">
        <part element="tns:forwardResponse" name="parameters"/>
    </message>
    <message name="getRendering">
        <part element="tns:getRendering" name="parameters"/>
    </message>
    <message name="getRenderingResponse">
        <part element="tns:getRenderingResponse" name="parameters"/>
    </message>
    <message name="getRenderingTypes">
        <part element="tns:getRenderingTypes" name="parameters"/>
    </message>
    <message name="getRenderingTypesResponse">
        <part element="tns:getRenderingTypesResponse" name="parameters"/>
    </message>
    <message name="getTaskInfo">
        <part element="tns:getTaskInfo" name="parameters"/>
    </message>
    <message name="getTaskInfoResponse">
        <part element="tns:getTaskInfoResponse" name="parameters"/>
    </message>
    <message name="getTaskDescription">
        <part element="tns:getTaskDescription" name="parameters"/>
    </message>
    <message name="getTaskDescriptionResponse">
        <part element="tns:getTaskDescriptionResponse" name="parameters"/>
    </message>
    <message name="deleteOutput">
        <part element="tns:deleteOutput" name="parameters"/>
    </message>
    <message name="deleteOutputResponse">
        <part element="tns:deleteOutputResponse" name="parameters"/>
    </message>
    <message name="setFault">
        <part element="tns:setFault" name="parameters"/>
    </message>
    <message name="setFaultResponse">
        <part element="tns:setFaultResponse" name="parameters"/>
    </message>
    <message name="deleteFault">
        <part element="tns:deleteFault" name="parameters"/>
    </message>
    <message name="deleteFaultResponse">
        <part element="tns:deleteFaultResponse" name="parameters"/>
    </message>
    <message name="activate">
        <part element="tns:activate" name="parameters"/>
    </message>
    <message name="activateResponse">
        <part element="tns:activateResponse" name="parameters"/>
    </message>
    <message name="nominate">
        <part element="tns:nominate" name="parameters"/>
    </message>
    <message name="nominateResponse">
        <part element="tns:nominateResponse" name="parameters"/>
    </message>
    <message name="setGenericHumanRole">
        <part element="tns:setGenericHumanRole" name="parameters"/>
    </message>
    <message name="setGenericHumanRoleResponse">
        <part element="tns:setGenericHumanRoleResponse" name="parameters"/>
    </message>
    <message name="getMyTaskAbstracts">
        <part element="tns:getMyTaskAbstracts" name="parameters"/>
    </message>
    <message name="getMyTaskAbstractsResponse">
        <part element="tns:getMyTaskAbstractsResponse" name="parameters"/>
    </message>
    <message name="getMyTasks">
        <part element="tns:getMyTasks" name="parameters"/>
    </message>
    <message name="getMyTasksResponse">
        <part element="tns:getMyTasksResponse" name="parameters"/>
    </message>
    <portType name="TaskManagementServicePort">
        <operation name="remove">
            <documentation><![CDATA[ This operation is applicable to notifications only. Notification recipients use this operation 
 to remove a notification permanently from their task list client. The system will not return  
 such a notification even if the user who removed it, attempts to retrieve it.

 @param identifier    The queue item object id of the notification.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:remove"/>
            <output message="tns:removeResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="setPriority">
            <documentation><![CDATA[ Changes the priority of a task. The caller must specify the integer value of the new priority.

 @param identifier    The queue item object id of the task.
 @param priority    The value of the new priority.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:setPriority"/>
            <output message="tns:setPriorityResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="start">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:start"/>
            <output message="tns:startResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="resume">
            <documentation><![CDATA[ Resumes a suspended task. The status of a resumed task transitions to "InProgress".

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:resume"/>
            <output message="tns:resumeResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="stop">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:stop"/>
            <output message="tns:stopResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="suspend">
            <documentation><![CDATA[ Suspends a task that is in an active state such as "Ready", "Reserved", or "InProgress", 
 and transitions it to the "Suspended" state.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:suspend"/>
            <output message="tns:suspendResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="skip">
            <documentation><![CDATA[ Skips the task. This operation is not supported. If the client calls this API,  
 the UnsupportedOperationException fault is returned.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:skip"/>
            <output message="tns:skipResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="delegate">
            <documentation><![CDATA[ Assigns a task that is in the "Ready", "Reserved", or "InProgress" state to another organizational entity, 
 transitioning the task to the "Ready" state.
 The organizationalEntity can contain only one user or one group/workqueue name.

 @param identifier    The queue item object id of the task.
 @param organizationalEntity The organizational entity to which the task is assigned.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:delegate"/>
            <output message="tns:delegateResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="query">
            <documentation><![CDATA[ Retrieves task data.  All clauses assume a (pseudo-) SQL syntax. If maxTasks is specified,
 then the number of tasks returned by the query will not exceed this limit. The taskIndexOffset
 can be used to perform multiple identical queries and iterate over result sets where the
 maxTasks size exceeds the query limit.

 When using this funtion, the caller must pass in all the select and where clauses.
 This implementation will not add additional clauses for the caller. 

 @param selectClause   Mandatory. For example, "dmi_workitem.r_priority,Customer:id"
 @param whereClause   Mandatory. For example, "((Customer:customerid ='001' and 
             dmi_workitem.r_performer_name ='tuser1') or /boolean.bool_var=false)"
 @param orderByClause   Optional. For example, "dmi_workitem.r_priority ASC, dmi_queue_item.date_sent DESC" 
 @param maxTasks    Default value is 100, if null.
 @param taskIndexOffset  Default value is 0, if null.
 @return query result
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:query"/>
            <output message="tns:queryResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="release">
            <documentation><![CDATA[ The release operation is applicable to work queue tasks only. It releases a work queue task 
 that is in the "Reserved" or "InProgress" state, for processing. A released work queue task 
 is transitioned to the "Ready" state.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:release"/>
            <output message="tns:releaseResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getInput">
            <documentation><![CDATA[ Gets process data as input for the task being processed. Process data is based on partName.  

 @param identifier    The queue item object id of the task.
 @param partName    The name of the process parameter, process variable, or package.
 @return      The value of the requested data. If partName is a primitive type process variable or
        a primitive type process parameter, the corresponding value is returned in its type.
        If it is a package or SDT process variable, a String containing the XML is returned.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getInput"/>
            <output message="tns:getInputResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="fail">
            <documentation><![CDATA[ This operation enables the Actual owner of a task to complete the execution of the task by raising a fault.
 The illegalOperationFault exception is returned if the task interface defines no faults.
 If fault name or fault data is not set, the operation returns the illegalArgumentFault exception.
 Currently, this function will always throw the illegalOperationFault exception.
 
 @param identifier    The queue item object id of the task.
 @param faultName    The fault name.
 @param faultData    The fault data.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:fail"/>
            <output message="tns:failResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="complete">
            <documentation><![CDATA[ This operation enables the Actual owner of a task to complete a task. If no output data is set,
 this operation returns the illegalArgumentFault exception.
 Currently, null taskData is allowed. This operation works only for tasks that do
 not require the signoff, set output paths, and select dynamic performer parameters to be set. 

 @param identifier    The queue item object id of the task.
 @param tCompleteTaskData  The task data required to complete a task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:complete"/>
            <output message="tns:completeResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="setOutput">
            <documentation><![CDATA[ Sets process data as output for the task being processed. Process data is based on  
 partName that is passed in to the function.

 @param identifier    The queue item object id of the task.
 @param partName    The name of the process parameter, process variable, or package.
 @param taskData    The value corresponding to the partName.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:setOutput"/>
            <output message="tns:setOutputResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="addAttachment">
            <documentation><![CDATA[ Adds an ad-hoc attachment to a selected task.

 @param identifier    The queue item object id of the task.
 @param attachmentName   Not used.
 @param accessType    Currently only the “objectid” type is accepted.  
        The Unsupported exception is returned for all other values.
 @param attachment    An {@link ObjectIdentity<ObjectId>} identifying the attachment.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:addAttachment"/>
            <output message="tns:addAttachmentResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getAttachments">
            <documentation><![CDATA[ Gets the attributes and contents of all attachments associated with a selected task.

 @param identifier    The queue item object id of the task.
 @param attachmentName   The object name of the attachment. If null, all attachments associated 
        with the task are returned.

 @return
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getAttachments"/>
            <output message="tns:getAttachmentsResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getOutput">
            <documentation><![CDATA[ Gets process data as output for the task being processed. Process data is based on partName.  

 @param identifier    The queue item object id of the task.
 @param partName    The name of the process parameter, process variable, or package.
 @return      The value of the requested data. If partName is a primitive type process variable or
        a primitive type process parameter, the corresponding value is returned in its type.
        If it is a package or a SDT process variable, a String containing the xml is returned.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getOutput"/>
            <output message="tns:getOutputResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getFault">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @param faultName    The fault name.
 @param faultData    The fault data.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getFault"/>
            <output message="tns:getFaultResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="claim">
            <documentation><![CDATA[ This operation enables Potential owners and Business administrators to claim 
 responsibility for a task and complete it. A Potential owner becomes the Actual owner 
 of a task by explicitly claiming it. A claimed task is transitioned to
 the "Reserved" state.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:claim"/>
            <output message="tns:claimResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="suspendUntil">
            <documentation><![CDATA[ Suspends a task that is in an active state such as "Ready", "Reserved", or "InProgress", 
 for a specific duration or until a specified time. The client must specify a duration or a fixed time. 
 Such a task is transitioned to the "Suspended" state.

 @param identifier    The queue item object id of the task.
 @param time     The duration for which the task must be suspended.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:suspendUntil"/>
            <output message="tns:suspendUntilResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getAttachmentInfos">
            <documentation><![CDATA[ Gets the attributes of all attachments associated with a selected task.

 @param identifier    The queue item object id of the task.
 @return      A list of TAttachmentInfo
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getAttachmentInfos"/>
            <output message="tns:getAttachmentInfosResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="deleteAttachments">
            <documentation><![CDATA[ Deletes all attachments with a specified name from a selected task. If the task is associated with  
 multiple attachments of the same name, all attachments are deleted.
 Attachments provided by the enclosing context are not affected by this operation.

 @param identifier    The queue item object id of the task.
 @param attachmentName   The object name of the attachment. If null, no attachment is deleted.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:deleteAttachments"/>
            <output message="tns:deleteAttachmentsResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="addComment">
            <documentation><![CDATA[ Adds a comment to the first package of a task, and forwards the comments to all 
 subsequent activities in the process.

 @param identifier    The queue item object id of the task.
 @param text     The text of the comment.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:addComment"/>
            <output message="tns:addCommentResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getComments">
            <documentation><![CDATA[ Gets all comments associated with a task.
 
 @param identifier    The queue item object id of the task.
 @return      A list of TComment
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getComments"/>
            <output message="tns:getCommentsResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="forward">
            <documentation><![CDATA[ Forwards a task that is in the "Ready", "Reserved", or "InProgress" state to another 
 organizational entity, transitioning the task to the "Ready" state.
 The organizational entity can contain only one user or workqueue name.

 @param identifier    The queue item object id of the task.
 @param organizationalEntity The organizational entity to which the task is forwarded.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:forward"/>
            <output message="tns:forwardResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getRendering">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @param renderingType   The rendering type.
 @return null
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getRendering"/>
            <output message="tns:getRenderingResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getRenderingTypes">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @return null
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getRenderingTypes"/>
            <output message="tns:getRenderingTypesResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getTaskInfo">
            <documentation><![CDATA[ Gets information about tasks and notifications.
 This operation returns a data object of type tTask.

 @param identifier    The queue item object id of the task.
 @return TTask
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getTaskInfo"/>
            <output message="tns:getTaskInfoResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getTaskDescription">
            <documentation><![CDATA[ Gets the presentation description of tasks and notifications in the specified mime type.

 @param identifier    The queue item object id of the task.
 @param contentType   Optional. By default, the value is text/plain. Only text/plain 
        content type is supported.
 @return description string
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getTaskDescription"/>
            <output message="tns:getTaskDescriptionResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="deleteOutput">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:deleteOutput"/>
            <output message="tns:deleteOutputResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="setFault">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @param faultName    The fault name.
 @param faultData    The fault data.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:setFault"/>
            <output message="tns:setFaultResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="deleteFault">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier   The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:deleteFault"/>
            <output message="tns:deleteFaultResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="activate">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.

 @param identifier    The queue item object id of the task.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:activate"/>
            <output message="tns:activateResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="nominate">
            <documentation><![CDATA[ Assigns a task that is in the "Ready", "Reserved", or "InProgress" to another organizational entity, 
 transitioning the task to the "Ready" state.
 The organizational entity can contain only one user or one group or workqueue name.

 @param identifier    The queue item object id of the task.
 @param organizationalEntity The organizational entity to which the task is assigned.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:nominate"/>
            <output message="tns:nominateResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="setGenericHumanRole">
            <documentation><![CDATA[ This operation is not supported. If the client calls this API, the UnsupportedOperationException 
 fault is returned.
 The organizational entity can contain only one user or one group or workqueue name.

 @param identifier     The queue item object id of the task.
 @param genericHumanRole   A generic human role.
 @param organizationalEntity  An organizational entity.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:setGenericHumanRole"/>
            <output message="tns:setGenericHumanRoleResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getMyTaskAbstracts">
            <documentation><![CDATA[ Retrieves task abstracts. This operation is used to obtain the data that is required
 to display a task list.
 <p/>
 If a work queue is not specified, then only personal tasksof the user
 are returned. If the work queue is specified then only tasks of that work queue are returned.
 <p/>
 The whereClause may only reference exactly one column using the following operators:
 equals (“=”), not equals( “<>”), less than (“<”), greater than (“>”), less than or equals (“<=”),
 and greater than or equals (“>=”),
 e.g., “Task.Priority = 1”.
 <p/>
 The whereClause is logically ANDed with the createdOn clause, which may reference only the
 Task column. The CreatedOnClause uses the same operators as the whereClause. The combination of the two clauses
 enables simple but restricted paging in a task list client.
 <p/>
 If maxTasks is specified, then the number of task abstracts returned for this query will not
 exceed this limit.

 @param taskType    (“ALL” | “TASKS” | “NOTIFICATIONS”)
        If querying work queue tasks, only tasks are returned.
 @param genericHumanRole  ("BusinessAdministrators" | "TaskStakeholders" | "PotentialOwners" | "ActualOwner")
        Use ActualOwner if you are querying for the tasks you own.
        Use PotentialOwners if you are querying for a user task list including the group tasks, or
        if you are a work queue processor trying to cherry-pick a work queue task. 
        You must pass in the work queue name to the workQueue parameter.
        Use TaskStakeholders or BusinessAdministrators if you are a work queue manager
        trying to view the work queue task list
 @param workQueue    Optional for PotentialOwners specified in generic HumanRole. You must provide this parameter
        if you specify the BusinessAdministrators or TaskStakeholders generic human role.
 @param status     ("READY" | "RESERVED" | "IN_PROGRESS" | "SUSPENDED") Any other status will be ignored.
 @param whereClause   For example, "dmi_workitem.r_priority>= 30"
 @param createdOnClause  For example, "dmi_queue_item.date_sent = Date('1/21/2008')"
 @param maxTasks    Default value is 100, if null.
 @return      A list of tasks.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getMyTaskAbstracts"/>
            <output message="tns:getMyTaskAbstractsResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
        <operation name="getMyTasks">
            <documentation><![CDATA[ Retrieves task details. This operation is used to obtain data that is required to display
 a task list. It is also used to obtain details of individual tasks.
 <p/>
 If a work queue is not specified, then only personal tasks of a user are returned. If the work queue
 is specified, then only tasks of that work queue are returned.
 <p/>
 The where clause may only reference exactly one column using the following operators:
 equals (“=”), not equals (“<>”), less than (“<”), greater than (“>”), less than or equals (“<=”),
 and greater than or equals (“>=”),
 e.g., “Task.Priority = 1”.
 <p/>
 The whereClause is logically ANDed with the createdOnClause, which may reference only the
 Task column. The CreatedOnClause uses the same operators as the whereClause. The combination 
 of the two clauses enables simple but restricted paging in the task list client.
 <p/>
 If maxTasks is specified, then the number of task details returned for this query, will not
 exceed this limit.

 @param taskType    (“ALL” | “TASKS” | “NOTIFICATIONS”)
        If you are querying for work queue tasks, only tasks are returned.
 @param genericHumanRole  ("BusinessAdministrators" | "TaskStakeholders" | "PotentialOwners" | "ActualOwner")
        Use ActualOwner if you are querying for the tasks you own.
        Use PotentialOwners if you are querying for a user task list including the group tasks, or
        if you are a work queue processor trying to cherry-pick a work queue task. 
        You must pass in the work queue name to the workQueue parameter.
        Use TaskStakeholders or BusinessAdministrators if you are a work queue manager
        trying to view the work queue task list.
 @param workQueue    Optional for PotentialOwners specified in generic HumanRole. You must provide this parameter
        if you specify the BusinessAdministrators or TaskStakeholders generic human role.
 @param status     ("READY" | "RESERVED" | "IN_PROGRESS" | "SUSPENDED") Any other status will be ignored.
 @param whereClause   For example, "dmi_workitem.r_priority>= 30"
 @param createdOnClause  For example, "dmi_queue_item.date_sent = Date('1/21/2008')"
 @param maxTasks    Default value is 100, if null.
 @return      A list of tasks.
 @throws BpmServiceException if there is any error
]]></documentation>
            <input message="tns:getMyTasks"/>
            <output message="tns:getMyTasksResponse"/>
            <fault message="tns:BpmServiceException" name="BpmServiceException"/>
            <fault message="tns:ServiceException" name="ServiceException"/>
        </operation>
    </portType>
    <binding name="TaskManagementServicePortBinding" type="tns:TaskManagementServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="remove">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="setPriority">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="start">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="resume">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="stop">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="suspend">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="skip">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="delegate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="query">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="release">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getInput">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="fail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="complete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="setOutput">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="addAttachment">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getAttachments">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getOutput">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getFault">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="claim">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="suspendUntil">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getAttachmentInfos">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteAttachments">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="addComment">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getComments">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="forward">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getRendering">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getRenderingTypes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getTaskInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getTaskDescription">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteOutput">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="setFault">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteFault">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="activate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="nominate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="setGenericHumanRole">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getMyTaskAbstracts">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
        <operation name="getMyTasks">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="BpmServiceException">
                <soap:fault name="BpmServiceException" use="literal"/>
            </fault>
            <fault name="ServiceException">
                <soap:fault name="ServiceException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="TaskManagementService">
        <port binding="tns:TaskManagementServicePortBinding" name="TaskManagementServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
